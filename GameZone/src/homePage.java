import com.mysql.jdbc.Connection;
import com.mysql.jdbc.Statement;
import java.sql.DriverManager;
import java.sql.ResultSet;

import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;

import java.util.*;

import javax.swing.JOptionPane;

import javax.swing.table.DefaultTableModel;

/*
 * homePage.java
 *
 * Created on 3 Jun, 2016, 5:56:42 PM
 */
/**
 *
 * @author Temp
 */
public class homePage extends javax.swing.JFrame {

    Timer timerGameMsgShow;
    Timer timerGameMsgHide;

    boolean oneTime = true;
    boolean begin1 = true;
    boolean begin2 = true;
    
    String username = "";

    int msGameMsgFlash = 1000;

    int game1HS;
    int game2HS;
    int game3HS;
    int rowsG1 = 0;
    int rowsG2 = 0;
    int rowsG3 = 0;

    int rowsAT = 0;

    /** Creates new form homePage */
    public homePage() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        coverPanel = new javax.swing.JPanel();
        game1HSPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        game1Table = new javax.swing.JTable();
        game1HSPicL = new javax.swing.JLabel();
        game2HSPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        game2Table = new javax.swing.JTable();
        game1HSPicL1 = new javax.swing.JLabel();
        game3HSPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        game3Table = new javax.swing.JTable();
        game3HSPicL = new javax.swing.JLabel();
        homeScreenPanel = new javax.swing.JPanel();
        welcomeL = new javax.swing.JLabel();
        nameL = new javax.swing.JLabel();
        homeScreenL = new javax.swing.JLabel();
        signOutBtn = new javax.swing.JButton();
        changePasswordBtn = new javax.swing.JButton();
        deleteAccountBtn = new javax.swing.JButton();
        homeScreenPicL = new javax.swing.JLabel();
        gameZonePanel = new javax.swing.JPanel();
        gameZoneL = new javax.swing.JLabel();
        gameZonePicL = new javax.swing.JLabel();
        adminPanel = new javax.swing.JPanel();
        welcomeL1 = new javax.swing.JLabel();
        adminSignOutBtn = new javax.swing.JButton();
        administratorControlL = new javax.swing.JLabel();
        adminChangePasswordBtn = new javax.swing.JButton();
        adminPicL = new javax.swing.JLabel();
        detailsPanel = new javax.swing.JPanel();
        usernameL = new javax.swing.JLabel();
        characterLimitL = new javax.swing.JLabel();
        currentPasswordL = new javax.swing.JLabel();
        passwordL = new javax.swing.JLabel();
        newPasswordL = new javax.swing.JLabel();
        confirmPasswordL = new javax.swing.JLabel();
        confirmNewPasswordL = new javax.swing.JLabel();
        usernameTF = new javax.swing.JTextField();
        currentPasswordPF = new javax.swing.JPasswordField();
        passwordPF = new javax.swing.JPasswordField();
        confirmPasswordPF = new javax.swing.JPasswordField();
        signIn2Btn = new javax.swing.JButton();
        back2ABtn = new javax.swing.JButton();
        createAccountBtn = new javax.swing.JButton();
        back2BBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        cancel1Btn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        cancel2Btn = new javax.swing.JButton();
        detailsPicL = new javax.swing.JLabel();
        game1Panel = new javax.swing.JPanel();
        game1PicPanel = new javax.swing.JPanel();
        game1PlayL = new javax.swing.JLabel();
        game1PicL = new javax.swing.JLabel();
        game1L = new javax.swing.JLabel();
        HS1L = new javax.swing.JLabel();
        highScore1L = new javax.swing.JLabel();
        game2Panel = new javax.swing.JPanel();
        game2PicPanel = new javax.swing.JPanel();
        game2PlayL = new javax.swing.JLabel();
        game2PicL = new javax.swing.JLabel();
        game2L = new javax.swing.JLabel();
        HS2L = new javax.swing.JLabel();
        highScore2L = new javax.swing.JLabel();
        game3Panel = new javax.swing.JPanel();
        game3PicPanel = new javax.swing.JPanel();
        game3PlayL = new javax.swing.JLabel();
        game3PicL = new javax.swing.JLabel();
        game3L = new javax.swing.JLabel();
        HS3L = new javax.swing.JLabel();
        highScore3L = new javax.swing.JLabel();
        accountPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        accountTable = new javax.swing.JTable();
        accountPicL = new javax.swing.JLabel();
        signIn1Btn = new javax.swing.JButton();
        newUserBtn = new javax.swing.JButton();
        exit1Btn = new javax.swing.JButton();
        homePagePicL = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setName("homePageFrame"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        coverPanel.setVerifyInputWhenFocusTarget(false);
        getContentPane().add(coverPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 600));

        game1HSPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "'Remember The Sequence' High Scores", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        game1HSPanel.setOpaque(false);
        game1HSPanel.setPreferredSize(new java.awt.Dimension(240, 140));
        game1HSPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        game1Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rank", "Username", "Score"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        game1Table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(game1Table);
        game1Table.getColumnModel().getColumn(0).setResizable(false);
        game1Table.getColumnModel().getColumn(0).setPreferredWidth(0);
        game1Table.getColumnModel().getColumn(1).setResizable(false);
        game1Table.getColumnModel().getColumn(2).setResizable(false);
        game1Table.getColumnModel().getColumn(2).setPreferredWidth(0);

        game1HSPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 32, 220, 99));
        game1HSPanel.add(game1HSPicL, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 240, 140));

        getContentPane().add(game1HSPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 415, 240, 140));

        game2HSPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "'Get The Squares' High Scores", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        game2HSPanel.setOpaque(false);
        game2HSPanel.setPreferredSize(new java.awt.Dimension(240, 140));
        game2HSPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        game2Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rank", "Username", "Score"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        game2Table.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(game2Table);
        game2Table.getColumnModel().getColumn(0).setResizable(false);
        game2Table.getColumnModel().getColumn(0).setPreferredWidth(0);
        game2Table.getColumnModel().getColumn(1).setResizable(false);
        game2Table.getColumnModel().getColumn(2).setResizable(false);
        game2Table.getColumnModel().getColumn(2).setPreferredWidth(0);

        game2HSPanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 32, 220, 99));
        game2HSPanel.add(game1HSPicL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 240, 140));

        getContentPane().add(game2HSPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 415, 240, 140));

        game3HSPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "'Match The Colours' High Scores", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        game3HSPanel.setOpaque(false);
        game3HSPanel.setPreferredSize(new java.awt.Dimension(240, 140));
        game3HSPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        game3Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rank", "Username", "Score"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        game3Table.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(game3Table);
        game3Table.getColumnModel().getColumn(0).setResizable(false);
        game3Table.getColumnModel().getColumn(0).setPreferredWidth(0);
        game3Table.getColumnModel().getColumn(1).setResizable(false);
        game3Table.getColumnModel().getColumn(2).setResizable(false);
        game3Table.getColumnModel().getColumn(2).setPreferredWidth(0);

        game3HSPanel.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 32, 220, 99));
        game3HSPanel.add(game3HSPicL, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 240, 140));

        getContentPane().add(game3HSPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 415, 240, 140));

        homeScreenPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        homeScreenPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        welcomeL.setFont(new java.awt.Font("Calibri", 3, 14));
        welcomeL.setText("Welcome");
        homeScreenPanel.add(welcomeL, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        nameL.setFont(new java.awt.Font("Calibri", 3, 14));
        homeScreenPanel.add(nameL, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, -1, -1));

        homeScreenL.setFont(new java.awt.Font("Times New Roman", 1, 24));
        homeScreenL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        homeScreenL.setText("HOME SCREEN");
        homeScreenPanel.add(homeScreenL, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 15, 180, 20));

        signOutBtn.setFont(new java.awt.Font("Times New Roman", 1, 12));
        signOutBtn.setText("Sign Out");
        signOutBtn.setPreferredSize(new java.awt.Dimension(90, 23));
        signOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signOutBtnActionPerformed(evt);
            }
        });
        homeScreenPanel.add(signOutBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 15, -1, -1));

        changePasswordBtn.setFont(new java.awt.Font("Times New Roman", 0, 12));
        changePasswordBtn.setText("Change Password");
        changePasswordBtn.setPreferredSize(new java.awt.Dimension(90, 23));
        changePasswordBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordBtnActionPerformed(evt);
            }
        });
        homeScreenPanel.add(changePasswordBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 3, 120, 20));

        deleteAccountBtn.setFont(new java.awt.Font("Times New Roman", 0, 12));
        deleteAccountBtn.setText("Delete Account");
        deleteAccountBtn.setPreferredSize(new java.awt.Dimension(90, 23));
        deleteAccountBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAccountBtnActionPerformed(evt);
            }
        });
        homeScreenPanel.add(deleteAccountBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 27, 120, 20));

        homeScreenPicL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/05.jpg"))); // NOI18N
        homeScreenPanel.add(homeScreenPicL, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 50));

        getContentPane().add(homeScreenPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 50));

        gameZonePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gameZonePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        gameZoneL.setFont(new java.awt.Font("Times New Roman", 1, 24));
        gameZoneL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gameZoneL.setText("WELCOME TO THE GAME ZONE");
        gameZonePanel.add(gameZoneL, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 15, 400, 20));

        gameZonePicL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/05.jpg"))); // NOI18N
        gameZonePanel.add(gameZonePicL, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 50));

        getContentPane().add(gameZonePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 50));

        adminPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        adminPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        welcomeL1.setFont(new java.awt.Font("Calibri", 3, 14));
        welcomeL1.setText("Welcome Admin");
        adminPanel.add(welcomeL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        adminSignOutBtn.setFont(new java.awt.Font("Times New Roman", 1, 12));
        adminSignOutBtn.setText("Sign Out");
        adminSignOutBtn.setPreferredSize(new java.awt.Dimension(90, 23));
        adminSignOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminSignOutBtnActionPerformed(evt);
            }
        });
        adminPanel.add(adminSignOutBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 14, -1, 22));

        administratorControlL.setFont(new java.awt.Font("Times New Roman", 1, 24));
        administratorControlL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        administratorControlL.setText("ADMINISTRATOR CONTROL");
        adminPanel.add(administratorControlL, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 15, 350, 20));

        adminChangePasswordBtn.setFont(new java.awt.Font("Times New Roman", 0, 12));
        adminChangePasswordBtn.setText("Change Password");
        adminChangePasswordBtn.setPreferredSize(new java.awt.Dimension(90, 23));
        adminChangePasswordBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminChangePasswordBtnActionPerformed(evt);
            }
        });
        adminPanel.add(adminChangePasswordBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(565, 15, 120, 20));

        adminPicL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/05.jpg"))); // NOI18N
        adminPanel.add(adminPicL, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 50));

        getContentPane().add(adminPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 50));

        detailsPanel.setOpaque(false);
        detailsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        usernameL.setText("Username");
        detailsPanel.add(usernameL, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 38, -1, -1));

        characterLimitL.setText(" (Upto 10 characters)");
        detailsPanel.add(characterLimitL, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 38, -1, -1));

        currentPasswordL.setText("Current Password");
        detailsPanel.add(currentPasswordL, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 38, -1, -1));

        passwordL.setText("Password");
        detailsPanel.add(passwordL, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 86, -1, -1));

        newPasswordL.setText("New Password");
        detailsPanel.add(newPasswordL, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 86, -1, -1));

        confirmPasswordL.setText("Confirm Password");
        detailsPanel.add(confirmPasswordL, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 134, -1, -1));

        confirmNewPasswordL.setText("Confirm New Password");
        detailsPanel.add(confirmNewPasswordL, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 134, -1, -1));
        detailsPanel.add(usernameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 35, 120, -1));
        detailsPanel.add(currentPasswordPF, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 35, 120, -1));
        detailsPanel.add(passwordPF, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 83, 120, -1));
        detailsPanel.add(confirmPasswordPF, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 131, 120, -1));

        signIn2Btn.setText("Sign In");
        signIn2Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signIn2BtnActionPerformed(evt);
            }
        });
        detailsPanel.add(signIn2Btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 160, 80, -1));

        back2ABtn.setText("Back");
        back2ABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back2ABtnActionPerformed(evt);
            }
        });
        detailsPanel.add(back2ABtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, 80, -1));

        createAccountBtn.setText("Create Account");
        createAccountBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAccountBtnActionPerformed(evt);
            }
        });
        detailsPanel.add(createAccountBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 170, 140, -1));

        back2BBtn.setText("Back");
        back2BBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back2BBtnActionPerformed(evt);
            }
        });
        detailsPanel.add(back2BBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, 80, -1));

        resetBtn.setText("Reset");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });
        detailsPanel.add(resetBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 170, 70, -1));

        cancel1Btn.setText("Cancel");
        cancel1Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel1BtnActionPerformed(evt);
            }
        });
        detailsPanel.add(cancel1Btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, 80, -1));

        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 12));
        deleteBtn.setText("DELETE ACCOUNT");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        detailsPanel.add(deleteBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 150, 140, -1));

        cancel2Btn.setText("Cancel");
        cancel2Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel2BtnActionPerformed(evt);
            }
        });
        detailsPanel.add(cancel2Btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, -1, -1));
        detailsPanel.add(detailsPicL, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 220));

        getContentPane().add(detailsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 115, 400, 220));

        game1Panel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "REMEMBER THE SEQUENCE", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 19))); // NOI18N
        game1Panel.setOpaque(false);
        game1Panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        game1PicPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        game1PicPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        game1PlayL.setFont(new java.awt.Font("Tahoma", 1, 18));
        game1PlayL.setForeground(new java.awt.Color(255, 255, 0));
        game1PlayL.setText("Click to Play !!");
        game1PicPanel.add(game1PlayL, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 75, -1, -1));

        game1PicL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/01.jpg"))); // NOI18N
        game1PicPanel.add(game1PicL, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 3, 200, 170));

        game1Panel.add(game1PicPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 32, 206, 176));

        game1L.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/1.jpg"))); // NOI18N
        game1L.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                game1LMouseClicked(evt);
            }
        });
        game1Panel.add(game1L, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 35, 200, 170));

        HS1L.setFont(new java.awt.Font("Tahoma", 0, 14));
        game1Panel.add(HS1L, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 220, -1, -1));

        highScore1L.setFont(new java.awt.Font("Tahoma", 0, 14));
        highScore1L.setText("Your High Score: ");
        game1Panel.add(highScore1L, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, -1, -1));

        getContentPane().add(game1Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 240, 250));

        game2Panel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "GET THE SQUARES", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 19))); // NOI18N
        game2Panel.setOpaque(false);
        game2Panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        game2PicPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        game2PicPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        game2PlayL.setFont(new java.awt.Font("Tahoma", 1, 18));
        game2PlayL.setForeground(new java.awt.Color(0, 0, 255));
        game2PlayL.setText("Click to Play !!");
        game2PicPanel.add(game2PlayL, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 75, -1, -1));

        game2PicL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/02.jpg"))); // NOI18N
        game2PicPanel.add(game2PicL, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 3, 200, 170));

        game2Panel.add(game2PicPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 32, 206, 176));

        game2L.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                game2LMouseClicked(evt);
            }
        });
        game2Panel.add(game2L, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 35, 200, 170));

        HS2L.setFont(new java.awt.Font("Tahoma", 0, 14));
        game2Panel.add(HS2L, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 220, -1, -1));

        highScore2L.setFont(new java.awt.Font("Tahoma", 0, 14));
        highScore2L.setText("Your High Score: ");
        game2Panel.add(highScore2L, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, -1, -1));

        getContentPane().add(game2Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 100, 240, 250));

        game3Panel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "MATCH THE COLOURS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 19))); // NOI18N
        game3Panel.setOpaque(false);
        game3Panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        game3PicPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        game3PicPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        game3PlayL.setFont(new java.awt.Font("Tahoma", 1, 18));
        game3PlayL.setForeground(new java.awt.Color(255, 255, 255));
        game3PlayL.setText("Click to Play !!");
        game3PicPanel.add(game3PlayL, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 75, -1, -1));

        game3PicL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/03.jpg"))); // NOI18N
        game3PicPanel.add(game3PicL, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 3, 200, 170));

        game3Panel.add(game3PicPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 32, 206, 176));

        game3L.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                game3LMouseClicked(evt);
            }
        });
        game3Panel.add(game3L, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 35, 200, 170));

        HS3L.setFont(new java.awt.Font("Tahoma", 0, 14));
        game3Panel.add(HS3L, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 220, -1, -1));

        highScore3L.setFont(new java.awt.Font("Tahoma", 0, 14));
        highScore3L.setText("Your High Score: ");
        game3Panel.add(highScore3L, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, -1, -1));

        getContentPane().add(game3Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 100, 240, 250));

        accountPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Account Information", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18))); // NOI18N
        accountPanel.setOpaque(false);
        accountPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        accountTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Remember The Sequence Scores", "Get The Squares Scores", "Match The Colours Scores"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        accountTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(accountTable);
        accountTable.getColumnModel().getColumn(0).setResizable(false);
        accountTable.getColumnModel().getColumn(0).setPreferredWidth(0);
        accountTable.getColumnModel().getColumn(1).setResizable(false);
        accountTable.getColumnModel().getColumn(2).setResizable(false);
        accountTable.getColumnModel().getColumn(3).setResizable(false);

        accountPanel.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 720, 240));
        accountPanel.add(accountPicL, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 760, 300));

        getContentPane().add(accountPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 75, 760, 300));

        signIn1Btn.setFont(new java.awt.Font("Times New Roman", 1, 18));
        signIn1Btn.setText("SIGN IN");
        signIn1Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signIn1BtnActionPerformed(evt);
            }
        });
        getContentPane().add(signIn1Btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 145, 130, 30));

        newUserBtn.setFont(new java.awt.Font("Times New Roman", 1, 18));
        newUserBtn.setText("NEW USER");
        newUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newUserBtnActionPerformed(evt);
            }
        });
        getContentPane().add(newUserBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 145, 130, 30));

        exit1Btn.setFont(new java.awt.Font("Times New Roman", 1, 18));
        exit1Btn.setText("EXIT");
        exit1Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit1BtnActionPerformed(evt);
            }
        });
        getContentPane().add(exit1Btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 225, 80, 30));

        homePagePicL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/04.jpg"))); // NOI18N
        getContentPane().add(homePagePicL, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 800, 550));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        if (oneTime) {
            oneTime = false;

            timerGameMsgShow = new Timer();
            timerGameMsgHide = new Timer();

            timerGameMsgShow.scheduleAtFixedRate(new taskGameMsgShow(), 0, msGameMsgFlash);
            timerGameMsgHide.scheduleAtFixedRate(new taskGameMsgHide(), msGameMsgFlash / 2, msGameMsgFlash);
        }

        if (begin1 && username.isEmpty()) {
            detailsPanel.setVisible(false);
            homeScreenPanel.setVisible(false);
            adminPanel.setVisible(false);
            accountPanel.setVisible(false);
            game1Panel.setVisible(false);
            game2Panel.setVisible(false);
            game3Panel.setVisible(false);
            coverPanel.setVisible(false);

            gameZonePanel.setVisible(true);
            game1HSPanel.setVisible(true);
            game2HSPanel.setVisible(true);
            game3HSPanel.setVisible(true);

            initial(true);

            begin1 = false;

        } else if (begin1 && !username.equals("Admin")) {
            detailsPanel.setVisible(false);
            adminPanel.setVisible(false);
            accountPanel.setVisible(false);
            gameZonePanel.setVisible(false);

            initial(false);

            homeScreenPanel.setVisible(true);
            game1Panel.setVisible(true);
            game2Panel.setVisible(true);
            game3Panel.setVisible(true);
            game1HSPanel.setVisible(true);
            game2HSPanel.setVisible(true);
            game3HSPanel.setVisible(true);

            coverPanel.setVisible(false);

            begin1 = false;
        }

        if (begin2) {
            begin2 = false;

            while (rowsG1 > 0) {
                ((DefaultTableModel) game1Table.getModel()).removeRow(0);
                rowsG1--;
            }
            while (rowsG2 > 0) {
                ((DefaultTableModel) game2Table.getModel()).removeRow(0);
                rowsG2--;
            }
            while (rowsG3 > 0) {
                ((DefaultTableModel) game3Table.getModel()).removeRow(0);
                rowsG3--;
            }

            try {
                Class.forName("java.sql.DriverManager");
                Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/gamezonedata", "root", "12345");
                Statement stmt = (Statement) con.createStatement();
                String query = "SELECT username,rememberthesequence FROM highscores ORDER BY rememberthesequence DESC";
                ResultSet rs = stmt.executeQuery(query);
                int i = 1;
                boolean loop = true;
                while (loop && i <= 5) {
                    if (rs.next()) {
                        DefaultTableModel model = (DefaultTableModel) game1Table.getModel();
                        model.addRow(new Object[]{Integer.toString(i), rs.getString("username"), rs.getString("rememberthesequence")});
                        rowsG1++;
                        i++;
                    } else {
                        loop = false;
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }

            try {
                Class.forName("java.sql.DriverManager");
                Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/gamezonedata", "root", "12345");
                Statement stmt = (Statement) con.createStatement();
                String query = "SELECT username,getthesquares FROM highscores ORDER BY getthesquares DESC";
                ResultSet rs = stmt.executeQuery(query);
                int i = 1;
                boolean loop = true;
                while (loop && i <= 5) {
                    if (rs.next()) {
                        DefaultTableModel model = (DefaultTableModel) game2Table.getModel();
                        model.addRow(new Object[]{Integer.toString(i), rs.getString("username"), rs.getString("getthesquares")});
                        rowsG2++;
                        i++;
                    } else {
                        loop = false;
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }

            try {
                Class.forName("java.sql.DriverManager");
                Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/gamezonedata", "root", "12345");
                Statement stmt = (Statement) con.createStatement();
                String query = "SELECT username,matchthecolours FROM highscores ORDER BY matchthecolours DESC";
                ResultSet rs = stmt.executeQuery(query);
                int i = 1;
                boolean loop = true;
                while (loop && i <= 5) {
                    if (rs.next()) {
                        DefaultTableModel model = (DefaultTableModel) game3Table.getModel();
                        model.addRow(new Object[]{Integer.toString(i), rs.getString("username"), rs.getString("matchthecolours")});
                        rowsG3++;
                        i++;
                    } else {
                        loop = false;
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        }
    }//GEN-LAST:event_formWindowActivated

    private void exit1BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit1BtnActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exit1BtnActionPerformed

    private void signIn1BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signIn1BtnActionPerformed
        initial(false);

        detailsPanel.setVisible(true);

        visible1();
        characterLimitL.setVisible(false);
        confirmPasswordL.setVisible(false);
        confirmPasswordPF.setVisible(false);
        createAccountBtn.setVisible(false);
        back2BBtn.setVisible(false);
    }//GEN-LAST:event_signIn1BtnActionPerformed

    private void newUserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newUserBtnActionPerformed
        initial(false);

        detailsPanel.setVisible(true);

        visible1();
        signIn2Btn.setVisible(false);
        back2ABtn.setVisible(false);
    }//GEN-LAST:event_newUserBtnActionPerformed

    private void back2ABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back2ABtnActionPerformed
        detailsPanel.setVisible(false);

        initial(true);
    }//GEN-LAST:event_back2ABtnActionPerformed

    private void back2BBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back2BBtnActionPerformed
        detailsPanel.setVisible(false);

        initial(true);
    }//GEN-LAST:event_back2BBtnActionPerformed

    private void createAccountBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAccountBtnActionPerformed
        boolean flag = true;
        boolean loop = true;
        String uName = usernameTF.getText();
        String pWord1 = new String(passwordPF.getPassword());
        String pWord2 = new String(confirmPasswordPF.getPassword());
        String errorMessage = "";

        if (uName.isEmpty()) {
            errorMessage = "Please enter the Username !!";
            flag = false;
        } else if (pWord1.isEmpty()) {
            errorMessage = "Please enter the Password !!";
            flag = false;
        } else if (pWord2.isEmpty()) {
            errorMessage = "Please confirm the Password !!";
            flag = false;
        } else if (!(pWord1.equals(pWord2))) {
            errorMessage = "Passwords do not match !!";
            flag = false;
        } else if (uName.length() > 10) {
            errorMessage = "Username should not be more than 10 characters long";
            flag = false;
        } else {
            try {
                Class.forName("java.sql.DriverManager");
                Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/gamezonedata", "root", "12345");
                Statement stmt = (Statement) con.createStatement();
                String query = "SELECT username FROM userAccounts";
                ResultSet rs = stmt.executeQuery(query);
                while (loop) {
                    if (rs.next()) {
                        if (uName.toLowerCase().equals(rs.getString("Username").toLowerCase())) {
                            flag = false;
                            loop = false;
                            errorMessage = "Username aldready exists !! Please try another username.";
                        }
                    } else {
                        loop = false;
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                visible1();
                signIn2Btn.setVisible(false);
                back2ABtn.setVisible(false);
            }
        }

        if (flag) {
            try {
                Class.forName("java.sql.DriverManager");
                Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/gamezonedata", "root", "12345");
                Statement stmt = (Statement) con.createStatement();
                String query1 = "INSERT INTO userAccounts VALUES ('" + uName + "','" + pWord1 + "');";
                String query2 = "INSERT INTO highscores VALUES('" + uName + "',0,0,0);";
                stmt.executeUpdate(query1);
                stmt.executeUpdate(query2);

                begin2 = true;

                playAudio(0);
                JOptionPane.showMessageDialog(this, "Account created Successfully!!");

                visible1();
                detailsPanel.setVisible(false);
                initial(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                visible1();
                signIn2Btn.setVisible(false);
                back2ABtn.setVisible(false);
            }
        } else if (!flag) {
            playAudio(0);
            JOptionPane.showMessageDialog(this, errorMessage);
            visible1();
            signIn2Btn.setVisible(false);
            back2ABtn.setVisible(false);
        }
    }//GEN-LAST:event_createAccountBtnActionPerformed

    private void signIn2BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signIn2BtnActionPerformed
        boolean flag = true;
        String uName = usernameTF.getText();
        String pWord = new String(passwordPF.getPassword());
        String errorMessage = "";

        if (uName.isEmpty()) {
            errorMessage = "Please enter the Username !!";
            flag = false;
        } else if (pWord.isEmpty()) {
            errorMessage = "Please enter the Password !!";
            flag = false;
        } else if (uName.length() > 10) {
            errorMessage = "Username should not be more than 10 characters long";
            flag = false;
        } else {
            boolean loop = true;
            boolean flag2 = true;

            try {
                Class.forName("java.sql.DriverManager");
                Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/gamezonedata", "root", "12345");
                Statement stmt = (Statement) con.createStatement();
                String query = "SELECT username FROM userAccounts";
                ResultSet rs = stmt.executeQuery(query);
                while (loop) {
                    if (rs.next()) {
                        if (uName.equals(rs.getString("Username"))) {
                            flag2 = false;
                            loop = false;
                        }
                    } else {
                        loop = false;
                    }
                }
                if (flag2) {
                    flag = false;
                    errorMessage = "Username does not exist !!";
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                visible1();
                signIn2Btn.setVisible(false);
                back2ABtn.setVisible(false);
            }
        }

        if (flag) {
            try {
                Class.forName("java.sql.DriverManager");
                Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/gamezonedata", "root", "12345");
                Statement stmt = (Statement) con.createStatement();
                String query1 = "SELECT * FROM userAccounts WHERE username = '" + uName + "';";
                ResultSet rs1 = stmt.executeQuery(query1);
                if (rs1.next()) {
                    if (pWord.equals(rs1.getString("Password"))) {
                        if (uName.equals("Admin")) {
                            visible1();
                            detailsPanel.setVisible(false);
                            gameZonePanel.setVisible(false);

                            username = uName;

                            boolean loop = true;

                            String query2 = "SELECT * FROM highscores ORDER BY Username";
                            ResultSet rs2 = stmt.executeQuery(query2);

                            while (rowsAT > 0) {
                                ((DefaultTableModel) accountTable.getModel()).removeRow(0);
                                rowsAT--;
                            }

                            while (loop) {
                                if (rs2.next()) {
                                    DefaultTableModel model = (DefaultTableModel) accountTable.getModel();
                                    model.addRow(new Object[]{rs2.getString("username"), rs2.getString("rememberthesequence"), rs2.getString("getthesquares"), rs2.getString("matchthecolours")});
                                    rowsAT++;
                                } else {
                                    loop = false;
                                }
                            }

                            adminPanel.setVisible(true);
                            accountPanel.setVisible(true);
                        } else {
                            visible1();
                            detailsPanel.setVisible(false);
                            gameZonePanel.setVisible(false);

                            username = uName;

                            String query2 = "SELECT * FROM highscores WHERE Username = '" + uName + "';";
                            ResultSet rs2 = stmt.executeQuery(query2);
                            if (rs2.next()) {
                                game1HS = rs2.getInt("RememberTheSequence");
                                game2HS = rs2.getInt("getthesquares");
                                game3HS = rs2.getInt("matchthecolours");
                            }

                            nameL.setText(username);
                            HS1L.setText("" + game1HS);
                            HS2L.setText("" + game2HS);
                            HS3L.setText("" + game3HS);

                            game1Panel.setVisible(true);
                            game2Panel.setVisible(true);
                            game3Panel.setVisible(true);
                            homeScreenPanel.setVisible(true);
                        }
                    } else {
                        playAudio(0);
                        JOptionPane.showMessageDialog(this, "Please enter the correct password !!");
                        visible1();
                        characterLimitL.setVisible(false);
                        confirmPasswordL.setVisible(false);
                        confirmPasswordPF.setVisible(false);
                        createAccountBtn.setVisible(false);
                        back2BBtn.setVisible(false);
                    }
                } else {
                    playAudio(0);
                    JOptionPane.showMessageDialog(this, "Username does not exist !!");
                    visible1();
                    characterLimitL.setVisible(false);
                    confirmPasswordL.setVisible(false);
                    confirmPasswordPF.setVisible(false);
                    createAccountBtn.setVisible(false);
                    back2BBtn.setVisible(false);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                visible1();
                characterLimitL.setVisible(false);
                confirmPasswordL.setVisible(false);
                confirmPasswordPF.setVisible(false);
                createAccountBtn.setVisible(false);
                back2BBtn.setVisible(false);
            }
        } else if (!flag) {
            playAudio(0);
            JOptionPane.showMessageDialog(this, errorMessage);
            visible1();
            characterLimitL.setVisible(false);
            confirmPasswordL.setVisible(false);
            confirmPasswordPF.setVisible(false);
            createAccountBtn.setVisible(false);
            back2BBtn.setVisible(false);
        }
    }//GEN-LAST:event_signIn2BtnActionPerformed

    private void signOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signOutBtnActionPerformed
        game1Panel.setVisible(false);
        game2Panel.setVisible(false);
        game3Panel.setVisible(false);
        homeScreenPanel.setVisible(false);

        initial(true);

        gameZonePanel.setVisible(true);

        username = "";
        game1HS = 0;
        game2HS = 0;
        game3HS = 0;
    }//GEN-LAST:event_signOutBtnActionPerformed

    private void adminSignOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminSignOutBtnActionPerformed
        adminPanel.setVisible(false);
        accountPanel.setVisible(false);

        initial(true);

        gameZonePanel.setVisible(true);
    }//GEN-LAST:event_adminSignOutBtnActionPerformed

    private void game1LMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_game1LMouseClicked
        rememberTheSequence frame1 = new rememberTheSequence();
        frame1.dataPass1(username, game1HS);
        homePage.this.setVisible(false);
        frame1.setVisible(true);
    }//GEN-LAST:event_game1LMouseClicked

    private void game2LMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_game2LMouseClicked
        getTheSquares frame2 = new getTheSquares();
        frame2.dataPass2(username, game2HS);
        homePage.this.setVisible(false);
        frame2.setVisible(true);
    }//GEN-LAST:event_game2LMouseClicked

    private void game3LMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_game3LMouseClicked
        matchTheColours frame3 = new matchTheColours();
        frame3.dataPass3(username, game3HS);
        homePage.this.setVisible(false);
        frame3.setVisible(true);
    }//GEN-LAST:event_game3LMouseClicked

    private void changePasswordBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordBtnActionPerformed
        game1Panel.setVisible(false);
        game2Panel.setVisible(false);
        game3Panel.setVisible(false);

        signOutBtn.setVisible(false);
        changePasswordBtn.setVisible(false);
        deleteAccountBtn.setVisible(false);

        visible2();

        detailsPanel.setVisible(true);
    }//GEN-LAST:event_changePasswordBtnActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        String pWord1 = new String(currentPasswordPF.getPassword());
        String pWord2 = new String(passwordPF.getPassword());
        String pWord3 = new String(confirmPasswordPF.getPassword());

        boolean flag = false;
        String errorMessage = "";
        if (pWord1.isEmpty()) {
            errorMessage = "Please enter your current password !!";
            flag = true;
        } else if (pWord2.isEmpty()) {
            errorMessage = "Please enter the new password !!";
            flag = true;
        } else if (pWord3.isEmpty()) {
            errorMessage = "Please confirm the new Password !!";
            flag = true;
        } else if (!(pWord2.equals(pWord3))) {
            errorMessage = "Passwords do not match !!";
            flag = true;
        } else {
            try {
                Class.forName("java.sql.DriverManager");
                Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/gamezonedata", "root", "12345");
                Statement stmt = (Statement) con.createStatement();
                String query1 = "SELECT * FROM UserAccounts WHERE Username = '" + username + "';";
                ResultSet rs = stmt.executeQuery(query1);
                if (rs.next()) {
                    if (pWord1.equals(rs.getString("Password"))) {
                        String query2 = "UPDATE UserAccounts SET Password = '" + pWord2 + "' WHERE Username = '" + username + "';";
                        stmt.executeUpdate(query2);

                        playAudio(0);
                        JOptionPane.showMessageDialog(this, "Password Updated Successfully");

                        detailsPanel.setVisible(false);

                        visible1();

                        if (username.equals("Admin")) {
                            game1Panel.setVisible(false);
                            game2Panel.setVisible(false);
                            game3Panel.setVisible(false);

                            accountPanel.setVisible(true);
                            adminSignOutBtn.setVisible(true);
                            adminChangePasswordBtn.setVisible(true);
                        } else {
                            game1Panel.setVisible(true);
                            game2Panel.setVisible(true);
                            game3Panel.setVisible(true);

                            signOutBtn.setVisible(true);
                            changePasswordBtn.setVisible(true);
                            deleteAccountBtn.setVisible(true);
                        }
                    } else {
                        flag = true;
                        errorMessage = "Please enter your current password correctly !!";
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        }

        if (flag) {
            playAudio(0);
            JOptionPane.showMessageDialog(this, errorMessage);
            visible2();
        }
    }//GEN-LAST:event_resetBtnActionPerformed

    private void cancel1BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel1BtnActionPerformed
        detailsPanel.setVisible(false);

        visible1();

        game1Panel.setVisible(true);
        game2Panel.setVisible(true);
        game3Panel.setVisible(true);

        if (username.equals("Admin")) {
            game1Panel.setVisible(false);
            game2Panel.setVisible(false);
            game3Panel.setVisible(false);

            accountPanel.setVisible(true);
            adminSignOutBtn.setVisible(true);
            adminChangePasswordBtn.setVisible(true);
        }

        signOutBtn.setVisible(true);
        changePasswordBtn.setVisible(true);
        deleteAccountBtn.setVisible(true);
    }//GEN-LAST:event_cancel1BtnActionPerformed

    private void deleteAccountBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAccountBtnActionPerformed
        game1Panel.setVisible(false);
        game2Panel.setVisible(false);
        game3Panel.setVisible(false);

        signOutBtn.setVisible(false);
        changePasswordBtn.setVisible(false);
        deleteAccountBtn.setVisible(false);

        visible3();

        detailsPanel.setVisible(true);
    }//GEN-LAST:event_deleteAccountBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        String pWord = new String(passwordPF.getPassword());

        boolean flag = false;

        String errorMessage = "";

        if (pWord.isEmpty()) {
            errorMessage = "Please Enter The password";
            flag = true;
        } else {
            try {
                Class.forName("java.sql.DriverManager");
                Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/gamezonedata", "root", "12345");
                Statement stmt = (Statement) con.createStatement();
                String query1 = "SELECT * FROM userAccounts WHERE Username = '" + username + "';";
                ResultSet rs = stmt.executeQuery(query1);

                if (rs.next()) {
                    if (pWord.equals(rs.getString("Password"))) {
                        begin2 = true;

                        playAudio(0);
                        int reply = JOptionPane.showConfirmDialog(this, "All highscore data and account information of \"" + username + "\" will be lost.\nDo you wish to proceed ?", "Caution !!", JOptionPane.YES_NO_OPTION);
                        if (reply == JOptionPane.YES_OPTION) {
                            String query2 = "DELETE FROM userAccounts WHERE Username = '" + username + "';";
                            String query3 = "DELETE FROM highscores WHERE Username = '" + username + "';";
                            stmt.executeUpdate(query2);
                            stmt.executeUpdate(query3);

                            playAudio(0);
                            JOptionPane.showMessageDialog(this, "Account deleted sucessfully !!");

                            visible1();

                            homeScreenPanel.setVisible(false);
                            detailsPanel.setVisible(false);

                            signOutBtn.setVisible(true);
                            changePasswordBtn.setVisible(true);
                            deleteAccountBtn.setVisible(true);

                            initial(true);

                            gameZonePanel.setVisible(true);

                            username = "";
                            game1HS = 0;
                            game2HS = 0;
                            game3HS = 0;

                        } else {
                            detailsPanel.setVisible(false);

                            visible1();

                            game1Panel.setVisible(true);
                            game2Panel.setVisible(true);
                            game3Panel.setVisible(true);

                            signOutBtn.setVisible(true);
                            changePasswordBtn.setVisible(true);
                            deleteAccountBtn.setVisible(true);
                        }
                    } else {
                        flag = true;
                        errorMessage = "Please enter your current password correctly !!";
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        }

        if (flag) {
            playAudio(0);
            JOptionPane.showMessageDialog(this, errorMessage);
            visible3();
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void cancel2BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel2BtnActionPerformed
        detailsPanel.setVisible(false);

        visible1();

        game1Panel.setVisible(true);
        game2Panel.setVisible(true);
        game3Panel.setVisible(true);

        signOutBtn.setVisible(true);
        changePasswordBtn.setVisible(true);
        deleteAccountBtn.setVisible(true);
    }//GEN-LAST:event_cancel2BtnActionPerformed

    private void adminChangePasswordBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminChangePasswordBtnActionPerformed
        accountPanel.setVisible(false);

        adminSignOutBtn.setVisible(false);
        adminChangePasswordBtn.setVisible(false);

        visible2();

        detailsPanel.setVisible(true);
    }//GEN-LAST:event_adminChangePasswordBtnActionPerformed

    class taskGameMsgShow extends TimerTask {
        public void run() {
            game1PlayL.setVisible(true);
            game2PlayL.setVisible(true);
            game3PlayL.setVisible(true);
        }
    }

    class taskGameMsgHide extends TimerTask {
        public void run() {
            game1PlayL.setVisible(false);
            game2PlayL.setVisible(false);
            game3PlayL.setVisible(false);
        }
    }

    public void initial(boolean state) {
        signIn1Btn.setVisible(state);
        newUserBtn.setVisible(state);
        exit1Btn.setVisible(state);
    }

    public void visible1() {
        usernameTF.setText("");
        currentPasswordPF.setText("");
        passwordPF.setText("");
        confirmPasswordPF.setText("");

        currentPasswordL.setVisible(false);
        newPasswordL.setVisible(false);
        confirmNewPasswordL.setVisible(false);

        currentPasswordPF.setVisible(false);

        resetBtn.setVisible(false);
        cancel1Btn.setVisible(false);
        cancel2Btn.setVisible(false);
        deleteBtn.setVisible(false);

        usernameL.setVisible(true);
        characterLimitL.setVisible(true);
        passwordL.setVisible(true);
        confirmPasswordL.setVisible(true);

        usernameTF.setVisible(true);

        passwordPF.setVisible(true);
        confirmPasswordPF.setVisible(true);

        signIn2Btn.setVisible(true);
        createAccountBtn.setVisible(true);
        back2ABtn.setVisible(true);
        back2BBtn.setVisible(true);
    }

    public void visible2() {
        usernameTF.setText("");
        currentPasswordPF.setText("");
        passwordPF.setText("");
        confirmPasswordPF.setText("");

        usernameL.setVisible(false);
        characterLimitL.setVisible(false);
        passwordL.setVisible(false);
        confirmPasswordL.setVisible(false);

        usernameTF.setVisible(false);

        signIn2Btn.setVisible(false);
        createAccountBtn.setVisible(false);
        back2ABtn.setVisible(false);
        back2BBtn.setVisible(false);
        cancel2Btn.setVisible(false);
        deleteBtn.setVisible(false);

        currentPasswordL.setVisible(true);
        newPasswordL.setVisible(true);
        confirmNewPasswordL.setVisible(true);

        passwordPF.setVisible(true);
        currentPasswordPF.setVisible(true);
        confirmPasswordPF.setVisible(true);

        resetBtn.setVisible(true);
        cancel1Btn.setVisible(true);
    }

    public void visible3() {
        usernameTF.setText("");
        currentPasswordPF.setText("");
        passwordPF.setText("");
        confirmPasswordPF.setText("");

        usernameL.setVisible(false);
        characterLimitL.setVisible(false);
        currentPasswordL.setVisible(false);
        confirmPasswordL.setVisible(false);
        newPasswordL.setVisible(false);
        confirmNewPasswordL.setVisible(false);

        usernameTF.setVisible(false);

        currentPasswordPF.setVisible(false);
        confirmPasswordPF.setVisible(false);

        signIn2Btn.setVisible(false);
        createAccountBtn.setVisible(false);
        back2ABtn.setVisible(false);
        back2BBtn.setVisible(false);
        resetBtn.setVisible(false);
        cancel1Btn.setVisible(false);

        passwordL.setVisible(true);

        passwordPF.setVisible(true);

        deleteBtn.setVisible(true);
        cancel2Btn.setVisible(true);
    }

    public void dataPass0(String uName) {
        username = uName;
        try {
            visible1();
            detailsPanel.setVisible(false);
            gameZonePanel.setVisible(false);

            Class.forName("java.sql.DriverManager");
            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/gamezonedata", "root", "12345");
            Statement stmt = (Statement) con.createStatement();
            String query = "SELECT * FROM highscores WHERE Username = '" + uName + "';";
            ResultSet rs = stmt.executeQuery(query);
            if (rs.next()) {
                game1HS = rs.getInt("RememberTheSequence");
                game2HS = rs.getInt("getthesquares");
                game3HS = rs.getInt("matchthecolours");
            }

            nameL.setText(username);
            HS1L.setText("" + game1HS);
            HS2L.setText("" + game2HS);
            HS3L.setText("" + game3HS);

            game1Panel.setVisible(true);
            game2Panel.setVisible(true);
            game3Panel.setVisible(true);
            homeScreenPanel.setVisible(true);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void playAudio(int track) {
        switch (track) {
            case 0:
                Toolkit.getDefaultToolkit().beep();
                break;
            case 1:
                try {
                    InputStream music = new FileInputStream(new File("src\\Audio\\proceedToGame.wav"));
                    AudioStream audio = new AudioStream(music);
                    AudioPlayer.player.start(audio);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                break;
            case 2:
                try {
                    InputStream music = new FileInputStream(new File("src\\Audio\\singleBeep.wav"));
                    AudioStream audio = new AudioStream(music);
                    AudioPlayer.player.start(audio);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                break;
            case 3:
                try {
                    InputStream music = new FileInputStream(new File("src\\Audio\\glassPing.wav"));
                    AudioStream audio = new AudioStream(music);
                    AudioPlayer.player.start(audio);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                break;
            case 4:
                try {
                    InputStream music = new FileInputStream(new File("src\\Audio\\singleCoinDrop.wav"));
                    AudioStream audio = new AudioStream(music);
                    AudioPlayer.player.start(audio);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                break;
            case 5:
                try {
                    InputStream music = new FileInputStream(new File("src\\Audio\\multipleCoinDrop.wav"));
                    AudioStream audio = new AudioStream(music);
                    AudioPlayer.player.start(audio);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                break;
            case 6:
                try {
                    InputStream music = new FileInputStream(new File("src\\Audio\\tadaHighScore.wav"));
                    AudioStream audio = new AudioStream(music);
                    AudioPlayer.player.start(audio);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                break;
            case 7:
                try {
                    InputStream music = new FileInputStream(new File("src\\Audio\\buzzerGameOver.wav"));
                    AudioStream audio = new AudioStream(music);
                    AudioPlayer.player.start(audio);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                break;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new homePage().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel HS1L;
    private javax.swing.JLabel HS2L;
    private javax.swing.JLabel HS3L;
    private javax.swing.JPanel accountPanel;
    private javax.swing.JLabel accountPicL;
    private javax.swing.JTable accountTable;
    private javax.swing.JButton adminChangePasswordBtn;
    private javax.swing.JPanel adminPanel;
    private javax.swing.JLabel adminPicL;
    private javax.swing.JButton adminSignOutBtn;
    private javax.swing.JLabel administratorControlL;
    private javax.swing.JButton back2ABtn;
    private javax.swing.JButton back2BBtn;
    private javax.swing.JButton cancel1Btn;
    private javax.swing.JButton cancel2Btn;
    private javax.swing.JButton changePasswordBtn;
    private javax.swing.JLabel characterLimitL;
    private javax.swing.JLabel confirmNewPasswordL;
    private javax.swing.JLabel confirmPasswordL;
    private javax.swing.JPasswordField confirmPasswordPF;
    private javax.swing.JPanel coverPanel;
    private javax.swing.JButton createAccountBtn;
    private javax.swing.JLabel currentPasswordL;
    private javax.swing.JPasswordField currentPasswordPF;
    private javax.swing.JButton deleteAccountBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JPanel detailsPanel;
    private javax.swing.JLabel detailsPicL;
    private javax.swing.JButton exit1Btn;
    private javax.swing.JPanel game1HSPanel;
    private javax.swing.JLabel game1HSPicL;
    private javax.swing.JLabel game1HSPicL1;
    private javax.swing.JLabel game1L;
    private javax.swing.JPanel game1Panel;
    private javax.swing.JLabel game1PicL;
    private javax.swing.JPanel game1PicPanel;
    private javax.swing.JLabel game1PlayL;
    private javax.swing.JTable game1Table;
    private javax.swing.JPanel game2HSPanel;
    private javax.swing.JLabel game2L;
    private javax.swing.JPanel game2Panel;
    private javax.swing.JLabel game2PicL;
    private javax.swing.JPanel game2PicPanel;
    private javax.swing.JLabel game2PlayL;
    private javax.swing.JTable game2Table;
    private javax.swing.JPanel game3HSPanel;
    private javax.swing.JLabel game3HSPicL;
    private javax.swing.JLabel game3L;
    private javax.swing.JPanel game3Panel;
    private javax.swing.JLabel game3PicL;
    private javax.swing.JPanel game3PicPanel;
    private javax.swing.JLabel game3PlayL;
    private javax.swing.JTable game3Table;
    private javax.swing.JLabel gameZoneL;
    private javax.swing.JPanel gameZonePanel;
    private javax.swing.JLabel gameZonePicL;
    private javax.swing.JLabel highScore1L;
    private javax.swing.JLabel highScore2L;
    private javax.swing.JLabel highScore3L;
    private javax.swing.JLabel homePagePicL;
    private javax.swing.JLabel homeScreenL;
    private javax.swing.JPanel homeScreenPanel;
    private javax.swing.JLabel homeScreenPicL;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel nameL;
    private javax.swing.JLabel newPasswordL;
    private javax.swing.JButton newUserBtn;
    private javax.swing.JLabel passwordL;
    private javax.swing.JPasswordField passwordPF;
    private javax.swing.JButton resetBtn;
    private javax.swing.JButton signIn1Btn;
    private javax.swing.JButton signIn2Btn;
    private javax.swing.JButton signOutBtn;
    private javax.swing.JLabel usernameL;
    private javax.swing.JTextField usernameTF;
    private javax.swing.JLabel welcomeL;
    private javax.swing.JLabel welcomeL1;
    // End of variables declaration//GEN-END:variables
}
