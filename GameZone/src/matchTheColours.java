import com.mysql.jdbc.Connection;
import com.mysql.jdbc.Statement;
import java.sql.DriverManager;

import java.awt.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;

import java.util.*;

import javax.swing.JOptionPane;

/*
 * matchTheColours.java
 *
 * Created on 23 May, 2016, 3:07:45 PM
 */
/**
 *
 * @author Temp
 */
public class matchTheColours extends javax.swing.JFrame {

    Timer timerDelay;
    Timer timerDisplay;
    Timer timerCorrect;

    int msTimeBegin = 750;
    int msTimeEnd = 1500;
    int msTimeMaximum = 2200;
    int msTimeMinimum = 200;
    int msTimeStep = 200;
    int msTimeInterval;
    int maxMultiple = 3;

    String colourNormal = "0x777777";
    String colourPressed = "0x999999";
    String colourHighlighted = "0xAAAAAA";
    String colourRed = "0xFF0000";
    String colourGreen = "0x00FF00";
    String colourBlue = "0x0000FF";
    String colourYellow = "0xFFFF00";
    String username = "";

    int gameScore = 0;
    int highScore;
    int control = 0;
    int count = 0;

    int[] config = new int[9];

    boolean newHighScore;
    boolean begin = true;
    boolean exit;

    boolean[] clickable = new boolean[9];

    /** Creates new form matchTheColours */
    public matchTheColours() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        coverPanel = new javax.swing.JPanel();
        homeScreenPanel = new javax.swing.JPanel();
        welcomeL = new javax.swing.JLabel();
        nameL = new javax.swing.JLabel();
        returnBtn = new javax.swing.JButton();
        matchTheColoursL = new javax.swing.JLabel();
        matchTheColoursPic1L = new javax.swing.JLabel();
        instructionsPanel = new javax.swing.JPanel();
        proceedToGameBtn = new javax.swing.JButton();
        instructions1TF = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        instructions2TA = new javax.swing.JTextArea();
        matchTheColoursPic2L = new javax.swing.JLabel();
        gamePanel = new javax.swing.JPanel();
        box1TF = new javax.swing.JTextField();
        box2TF = new javax.swing.JTextField();
        box3TF = new javax.swing.JTextField();
        box4TF = new javax.swing.JTextField();
        box5TF = new javax.swing.JTextField();
        box6TF = new javax.swing.JTextField();
        box7TF = new javax.swing.JTextField();
        box8TF = new javax.swing.JTextField();
        startBtn = new javax.swing.JButton();
        gameScore1L = new javax.swing.JLabel();
        gameScore2L = new javax.swing.JLabel();
        highScore1L = new javax.swing.JLabel();
        hScore2L = new javax.swing.JLabel();
        correctMsgL = new javax.swing.JLabel();
        startMsg1L = new javax.swing.JLabel();
        startMsg2L = new javax.swing.JLabel();
        startMsg3L = new javax.swing.JLabel();
        instructionsMsg1L = new javax.swing.JLabel();
        instructionsMsg2L = new javax.swing.JLabel();
        matchTheColoursPic3L = new javax.swing.JLabel();
        gameOverPanel = new javax.swing.JPanel();
        gameOverL = new javax.swing.JLabel();
        gameScoreL = new javax.swing.JLabel();
        highScoreL = new javax.swing.JLabel();
        playAgainBtn = new javax.swing.JButton();
        rememberTheSequencePic4L = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Match The Colours");
        setMinimumSize(new java.awt.Dimension(800, 600));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        coverPanel.setVerifyInputWhenFocusTarget(false);
        getContentPane().add(coverPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 600));

        homeScreenPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        homeScreenPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        welcomeL.setFont(new java.awt.Font("Calibri", 3, 14));
        welcomeL.setText("Welcome");
        homeScreenPanel.add(welcomeL, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        nameL.setFont(new java.awt.Font("Calibri", 3, 14));
        homeScreenPanel.add(nameL, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, -1, -1));

        returnBtn.setFont(new java.awt.Font("Times New Roman", 1, 12));
        returnBtn.setText("Back To Main Menu");
        returnBtn.setPreferredSize(new java.awt.Dimension(90, 23));
        returnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBtnActionPerformed(evt);
            }
        });
        homeScreenPanel.add(returnBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 15, 150, -1));

        matchTheColoursL.setFont(new java.awt.Font("Times New Roman", 1, 24));
        matchTheColoursL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        matchTheColoursL.setText("MATCH THE COLOURS");
        homeScreenPanel.add(matchTheColoursL, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 15, 280, 20));

        matchTheColoursPic1L.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/05.jpg"))); // NOI18N
        homeScreenPanel.add(matchTheColoursPic1L, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 50));

        getContentPane().add(homeScreenPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 50));

        instructionsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        proceedToGameBtn.setFont(new java.awt.Font("Tahoma", 1, 16));
        proceedToGameBtn.setText("Proceed To Game");
        proceedToGameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceedToGameBtnActionPerformed(evt);
            }
        });
        instructionsPanel.add(proceedToGameBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 470, 200, 30));

        instructions1TF.setEditable(false);
        instructions1TF.setFont(new java.awt.Font("Calibri", 3, 20));
        instructions1TF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        instructions1TF.setText("INSTRUCTIONS");
        instructionsPanel.add(instructions1TF, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, 700, 30));

        instructions2TA.setColumns(20);
        instructions2TA.setEditable(false);
        instructions2TA.setFont(new java.awt.Font("Monospaced", 0, 14));
        instructions2TA.setRows(5);
        instructions2TA.setText("\n    There are two columns with four squares each.\n\n    The colours Red, Green, Blue and Yellow will be distributed in each column.\n\n    Your objective is to match each colour of one column, to the same colour \n    in the other column.\n\n    After completion of each set, press the 'Start' button to view the next set.\n\n    Have Fun!!");
        instructions2TA.setBorder(null);
        instructions2TA.setOpaque(false);
        jScrollPane2.setViewportView(instructions2TA);

        instructionsPanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 700, 245));

        matchTheColoursPic2L.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/09.jpg"))); // NOI18N
        instructionsPanel.add(matchTheColoursPic2L, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 550));

        getContentPane().add(instructionsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 800, 550));

        gamePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        box1TF.setEditable(false);
        box1TF.setMaximumSize(new java.awt.Dimension(80, 80));
        box1TF.setMinimumSize(new java.awt.Dimension(80, 80));
        box1TF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                box1TFMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                box1TFMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                box1TFMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                box1TFMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                box1TFMouseReleased(evt);
            }
        });
        gamePanel.add(box1TF, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 100, 80, 80));

        box2TF.setEditable(false);
        box2TF.setMaximumSize(new java.awt.Dimension(80, 80));
        box2TF.setMinimumSize(new java.awt.Dimension(80, 80));
        box2TF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                box2TFMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                box2TFMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                box2TFMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                box2TFMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                box2TFMouseReleased(evt);
            }
        });
        gamePanel.add(box2TF, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 200, 80, 80));

        box3TF.setEditable(false);
        box3TF.setMaximumSize(new java.awt.Dimension(80, 80));
        box3TF.setMinimumSize(new java.awt.Dimension(80, 80));
        box3TF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                box3TFMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                box3TFMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                box3TFMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                box3TFMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                box3TFMouseReleased(evt);
            }
        });
        gamePanel.add(box3TF, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 300, 80, 80));

        box4TF.setEditable(false);
        box4TF.setMaximumSize(new java.awt.Dimension(80, 80));
        box4TF.setMinimumSize(new java.awt.Dimension(80, 80));
        box4TF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                box4TFMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                box4TFMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                box4TFMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                box4TFMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                box4TFMouseReleased(evt);
            }
        });
        gamePanel.add(box4TF, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 400, 80, 80));

        box5TF.setEditable(false);
        box5TF.setMaximumSize(new java.awt.Dimension(80, 80));
        box5TF.setMinimumSize(new java.awt.Dimension(80, 80));
        box5TF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                box5TFMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                box5TFMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                box5TFMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                box5TFMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                box5TFMouseReleased(evt);
            }
        });
        gamePanel.add(box5TF, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 100, 80, 80));

        box6TF.setEditable(false);
        box6TF.setMaximumSize(new java.awt.Dimension(80, 80));
        box6TF.setMinimumSize(new java.awt.Dimension(80, 80));
        box6TF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                box6TFMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                box6TFMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                box6TFMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                box6TFMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                box6TFMouseReleased(evt);
            }
        });
        gamePanel.add(box6TF, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 200, 80, 80));

        box7TF.setEditable(false);
        box7TF.setMaximumSize(new java.awt.Dimension(80, 80));
        box7TF.setMinimumSize(new java.awt.Dimension(80, 80));
        box7TF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                box7TFMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                box7TFMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                box7TFMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                box7TFMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                box7TFMouseReleased(evt);
            }
        });
        gamePanel.add(box7TF, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 300, 80, 80));

        box8TF.setEditable(false);
        box8TF.setMaximumSize(new java.awt.Dimension(80, 80));
        box8TF.setMinimumSize(new java.awt.Dimension(80, 80));
        box8TF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                box8TFMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                box8TFMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                box8TFMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                box8TFMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                box8TFMouseReleased(evt);
            }
        });
        gamePanel.add(box8TF, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 400, 80, 80));

        startBtn.setFont(new java.awt.Font("Arial", 1, 24));
        startBtn.setText("Start Game");
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });
        gamePanel.add(startBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 200, -1, -1));

        gameScore1L.setFont(new java.awt.Font("Tahoma", 1, 14));
        gameScore1L.setForeground(new java.awt.Color(0, 255, 0));
        gameScore1L.setText("Game Score: ");
        gamePanel.add(gameScore1L, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, -1, -1));

        gameScore2L.setFont(new java.awt.Font("Tahoma", 1, 14));
        gameScore2L.setForeground(new java.awt.Color(0, 255, 0));
        gamePanel.add(gameScore2L, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 50, -1, -1));

        highScore1L.setFont(new java.awt.Font("Tahoma", 1, 14));
        highScore1L.setForeground(new java.awt.Color(0, 255, 0));
        highScore1L.setText("High Score: ");
        gamePanel.add(highScore1L, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 50, -1, -1));

        hScore2L.setFont(new java.awt.Font("Tahoma", 1, 14));
        hScore2L.setForeground(new java.awt.Color(0, 255, 0));
        gamePanel.add(hScore2L, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 50, -1, -1));

        correctMsgL.setFont(new java.awt.Font("Arial", 1, 24));
        correctMsgL.setForeground(new java.awt.Color(153, 255, 153));
        correctMsgL.setText("That's Right !!");
        gamePanel.add(correctMsgL, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 200, -1, -1));

        startMsg1L.setFont(new java.awt.Font("Arial", 1, 18));
        startMsg1L.setForeground(new java.awt.Color(255, 255, 255));
        startMsg1L.setText("Remember the pairs of");
        gamePanel.add(startMsg1L, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 300, -1, -1));

        startMsg2L.setFont(new java.awt.Font("Arial", 1, 18));
        startMsg2L.setForeground(new java.awt.Color(255, 255, 255));
        startMsg2L.setText("colours that will be");
        gamePanel.add(startMsg2L, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 325, -1, -1));

        startMsg3L.setFont(new java.awt.Font("Arial", 1, 18));
        startMsg3L.setForeground(new java.awt.Color(255, 255, 255));
        startMsg3L.setText("displayed on clicking Start.");
        gamePanel.add(startMsg3L, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 350, -1, -1));

        instructionsMsg1L.setFont(new java.awt.Font("Arial", 1, 18));
        instructionsMsg1L.setForeground(new java.awt.Color(0, 0, 255));
        instructionsMsg1L.setText("Select the boxes with");
        gamePanel.add(instructionsMsg1L, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 200, -1, -1));

        instructionsMsg2L.setFont(new java.awt.Font("Arial", 1, 18));
        instructionsMsg2L.setForeground(new java.awt.Color(0, 0, 255));
        instructionsMsg2L.setText("matching pairs of colours.");
        gamePanel.add(instructionsMsg2L, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 225, -1, -1));

        matchTheColoursPic3L.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/08.jpg"))); // NOI18N
        gamePanel.add(matchTheColoursPic3L, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 550));

        getContentPane().add(gamePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 800, 550));

        gameOverPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        gameOverL.setFont(new java.awt.Font("Arial", 1, 48));
        gameOverL.setForeground(new java.awt.Color(51, 255, 255));
        gameOverL.setText("Game Over");
        gameOverPanel.add(gameOverL, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 30, -1, -1));

        gameScoreL.setFont(new java.awt.Font("Elephant", 1, 20));
        gameScoreL.setForeground(new java.awt.Color(0, 0, 153));
        gameScoreL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gameScoreL.setOpaque(true);
        gameOverPanel.add(gameScoreL, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 300, 250, 30));

        highScoreL.setFont(new java.awt.Font("Elephant", 1, 20));
        highScoreL.setForeground(new java.awt.Color(51, 204, 0));
        highScoreL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        highScoreL.setOpaque(true);
        gameOverPanel.add(highScoreL, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 300, 250, 30));

        playAgainBtn.setFont(new java.awt.Font("Gill Sans Ultra Bold", 0, 24));
        playAgainBtn.setText("Play Again");
        playAgainBtn.setMaximumSize(new java.awt.Dimension(200, 70));
        playAgainBtn.setMinimumSize(new java.awt.Dimension(200, 70));
        playAgainBtn.setPreferredSize(new java.awt.Dimension(200, 70));
        playAgainBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playAgainBtnActionPerformed(evt);
            }
        });
        gameOverPanel.add(playAgainBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 400, 200, 70));

        rememberTheSequencePic4L.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/10.jpg"))); // NOI18N
        gameOverPanel.add(rememberTheSequencePic4L, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 550));

        getContentPane().add(gameOverPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 800, 550));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        if (begin) {
            msTimeInterval = msTimeMaximum;

            if (highScore == 0) {
                newHighScore = false;
            } else {
                newHighScore = true;
            }

            hScore2L.setText("" + highScore);
            gameScore2L.setText("" + gameScore);

            setAllBoxesNormal();

            startMsg1L.setVisible(true);
            startMsg2L.setVisible(true);
            startMsg3L.setVisible(true);

            correctMsgL.setVisible(false);
            instructionsMsg1L.setVisible(false);
            instructionsMsg2L.setVisible(false);

            gamePanel.setVisible(false);
            gameOverPanel.setVisible(false);

            coverPanel.setVisible(false);

            begin = false;
            exit = true;
        }
    }//GEN-LAST:event_formWindowActivated

    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
        int i, j, flag = 0;

        startBtn.setVisible(false);

        startMsg1L.setVisible(false);
        startMsg2L.setVisible(false);
        startMsg3L.setVisible(false);

        exit = false;

        for (i = 1; i <= 8; i++) {
            config[i] = 0;
            clickable[i] = false;
        }

        for (i = 1; i <= 4; i++) {
            flag = 0;
            while (flag == 0) {
                j = (int) (Math.random() * 4 + 1);
                if (config[j] == 0) {
                    config[j] = i;
                    flag = 1;
                }
            }
        }

        for (i = 1; i <= 4; i++) {
            flag = 0;
            while (flag == 0) {
                j = (int) (Math.random() * 4 + 5);
                if (config[j] == 0) {
                    config[j] = i;
                    flag = 1;
                }
            }
        }

        
        display(msTimeBegin, msTimeBegin + msTimeInterval);
    }//GEN-LAST:event_startBtnActionPerformed

    private void box1TFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box1TFMouseClicked
        if (clickable[1]) {
            clickable[1] = false;
            count = count + 1;
            setBoxColour(1, config[1]);
            if (control == 0) {
                control = config[1];
            } else {
                if (control == config[1]) {
                    control = 0;

                    playAudio(4);
                    gameScore += Math.round((5 - (float) (count / 2)) * ((((float) (msTimeMaximum - msTimeInterval) / (float) (msTimeMaximum - msTimeMinimum)) * (maxMultiple - 1)) + 1));
                    gameScore2L.setText("" + gameScore);

                    if (gameScore > highScore) {
                        if (newHighScore && highScore != 0) {
                            playAudio(6);
                            JOptionPane.showMessageDialog(this, "New High Score Acheived !!");
                            newHighScore = false;
                        }

                        highScore = gameScore;
                        hScore2L.setText("" + highScore);

                        try {
                            Class.forName("java.sql.DriverManager");
                            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/gamezonedata", "root", "12345");
                            Statement stmt = (Statement) con.createStatement();
                            String query = "UPDATE highscores SET MatchTheColours = '" + highScore + "' WHERE Username = '" + username + "';";
                            stmt.executeUpdate(query);
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    }

                    if (count == 8) {
                        newLevel();
                    }
                } else {
                    gameOver();
                    control = 0;
                }
            }
        }
    }//GEN-LAST:event_box1TFMouseClicked

    private void box2TFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box2TFMouseClicked
        if (clickable[2]) {
            clickable[2] = false;
            count = count + 1;
            setBoxColour(2, config[2]);
            if (control == 0) {
                control = config[2];
            } else {
                if (control == config[2]) {
                    control = 0;

                    playAudio(4);
                    gameScore += Math.round((5 - (float) (count / 2)) * ((((float) (msTimeMaximum - msTimeInterval) / (float) (msTimeMaximum - msTimeMinimum)) * (maxMultiple - 1)) + 1));
                    gameScore2L.setText("" + gameScore);

                    if (gameScore > highScore) {
                        if (newHighScore && highScore != 0) {
                            playAudio(6);
                            JOptionPane.showMessageDialog(this, "New High Score Acheived !!");
                            newHighScore = false;
                        }

                        highScore = gameScore;
                        hScore2L.setText("" + highScore);

                        try {
                            Class.forName("java.sql.DriverManager");
                            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/gamezonedata", "root", "12345");
                            Statement stmt = (Statement) con.createStatement();
                            String query = "UPDATE highscores SET MatchTheColours = '" + highScore + "' WHERE Username = '" + username + "';";
                            stmt.executeUpdate(query);
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    }

                    if (count == 8) {
                        newLevel();
                    }
                } else {
                    gameOver();
                }
            }
        }
    }//GEN-LAST:event_box2TFMouseClicked

    private void box3TFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box3TFMouseClicked
        if (clickable[3]) {
            clickable[3] = false;
            count = count + 1;
            setBoxColour(3, config[3]);
            if (control == 0) {
                control = config[3];
            } else {
                if (control == config[3]) {
                    control = 0;

                    playAudio(4);
                    gameScore += Math.round((5 - (float) (count / 2)) * ((((float) (msTimeMaximum - msTimeInterval) / (float) (msTimeMaximum - msTimeMinimum)) * (maxMultiple - 1)) + 1));
                    gameScore2L.setText("" + gameScore);

                    if (gameScore > highScore) {
                        if (newHighScore && highScore != 0) {
                            playAudio(6);
                            JOptionPane.showMessageDialog(this, "New High Score Acheived !!");
                            newHighScore = false;
                        }

                        highScore = gameScore;
                        hScore2L.setText("" + highScore);

                        try {
                            Class.forName("java.sql.DriverManager");
                            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/gamezonedata", "root", "12345");
                            Statement stmt = (Statement) con.createStatement();
                            String query = "UPDATE highscores SET MatchTheColours = '" + highScore + "' WHERE Username = '" + username + "';";
                            stmt.executeUpdate(query);
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    }

                    if (count == 8) {
                        newLevel();
                    }
                } else {
                    gameOver();
                }
            }
        }
    }//GEN-LAST:event_box3TFMouseClicked

    private void box4TFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box4TFMouseClicked
        if (clickable[4]) {
            clickable[4] = false;
            count = count + 1;
            setBoxColour(4, config[4]);
            if (control == 0) {
                control = config[4];
            } else {
                if (control == config[4]) {
                    control = 0;

                    playAudio(4);
                    gameScore += Math.round((5 - (float) (count / 2)) * ((((float) (msTimeMaximum - msTimeInterval) / (float) (msTimeMaximum - msTimeMinimum)) * (maxMultiple - 1)) + 1));
                    gameScore2L.setText("" + gameScore);

                    if (gameScore > highScore) {
                        if (newHighScore && highScore != 0) {
                            playAudio(6);
                            JOptionPane.showMessageDialog(this, "New High Score Acheived !!");
                            newHighScore = false;
                        }

                        highScore = gameScore;
                        hScore2L.setText("" + highScore);

                        try {
                            Class.forName("java.sql.DriverManager");
                            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/gamezonedata", "root", "12345");
                            Statement stmt = (Statement) con.createStatement();
                            String query = "UPDATE highscores SET MatchTheColours = '" + highScore + "' WHERE Username = '" + username + "';";
                            stmt.executeUpdate(query);
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    }

                    if (count == 8) {
                        newLevel();
                    }
                } else {
                    gameOver();
                }
            }
        }
    }//GEN-LAST:event_box4TFMouseClicked

    private void box5TFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box5TFMouseClicked
        if (clickable[5]) {
            clickable[5] = false;
            count = count + 1;
            setBoxColour(5, config[5]);
            if (control == 0) {
                control = config[5];
            } else {
                if (control == config[5]) {
                    control = 0;

                    playAudio(4);
                    gameScore += Math.round((5 - (float) (count / 2)) * ((((float) (msTimeMaximum - msTimeInterval) / (float) (msTimeMaximum - msTimeMinimum)) * (maxMultiple - 1)) + 1));
                    gameScore2L.setText("" + gameScore);

                    if (gameScore > highScore) {
                        if (newHighScore && highScore != 0) {
                            playAudio(6);
                            JOptionPane.showMessageDialog(this, "New High Score Acheived !!");
                            newHighScore = false;
                        }

                        highScore = gameScore;
                        hScore2L.setText("" + highScore);

                        try {
                            Class.forName("java.sql.DriverManager");
                            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/gamezonedata", "root", "12345");
                            Statement stmt = (Statement) con.createStatement();
                            String query = "UPDATE highscores SET MatchTheColours = '" + highScore + "' WHERE Username = '" + username + "';";
                            stmt.executeUpdate(query);
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    }

                    if (count == 8) {
                        newLevel();
                    }
                } else {
                    gameOver();
                }
            }
        }
    }//GEN-LAST:event_box5TFMouseClicked

    private void box6TFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box6TFMouseClicked
        if (clickable[6]) {
            clickable[6] = false;
            count = count + 1;
            setBoxColour(6, config[6]);
            if (control == 0) {
                control = config[6];
            } else {
                if (control == config[6]) {
                    control = 0;

                    playAudio(4);
                    gameScore += Math.round((5 - (float) (count / 2)) * ((((float) (msTimeMaximum - msTimeInterval) / (float) (msTimeMaximum - msTimeMinimum)) * (maxMultiple - 1)) + 1));
                    gameScore2L.setText("" + gameScore);

                    if (gameScore > highScore) {
                        if (newHighScore && highScore != 0) {
                            playAudio(6);
                            JOptionPane.showMessageDialog(this, "New High Score Acheived !!");
                            newHighScore = false;
                        }

                        highScore = gameScore;
                        hScore2L.setText("" + highScore);

                        try {
                            Class.forName("java.sql.DriverManager");
                            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/gamezonedata", "root", "12345");
                            Statement stmt = (Statement) con.createStatement();
                            String query = "UPDATE highscores SET MatchTheColours = '" + highScore + "' WHERE Username = '" + username + "';";
                            stmt.executeUpdate(query);
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    }

                    if (count == 8) {
                        newLevel();
                    }
                } else {
                    gameOver();
                }
            }
        }
    }//GEN-LAST:event_box6TFMouseClicked

    private void box7TFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box7TFMouseClicked
        if (clickable[7]) {
            clickable[7] = false;
            count = count + 1;
            setBoxColour(7, config[7]);
            if (control == 0) {
                control = config[7];
            } else {
                if (control == config[7]) {
                    control = 0;

                    playAudio(4);
                    gameScore += Math.round((5 - (float) (count / 2)) * ((((float) (msTimeMaximum - msTimeInterval) / (float) (msTimeMaximum - msTimeMinimum)) * (maxMultiple - 1)) + 1));
                    gameScore2L.setText("" + gameScore);

                    if (gameScore > highScore) {
                        if (newHighScore && highScore != 0) {
                            playAudio(6);
                            JOptionPane.showMessageDialog(this, "New High Score Acheived !!");
                            newHighScore = false;
                        }

                        highScore = gameScore;
                        hScore2L.setText("" + highScore);

                        try {
                            Class.forName("java.sql.DriverManager");
                            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/gamezonedata", "root", "12345");
                            Statement stmt = (Statement) con.createStatement();
                            String query = "UPDATE highscores SET MatchTheColours = '" + highScore + "' WHERE Username = '" + username + "';";
                            stmt.executeUpdate(query);
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    }

                    if (count == 8) {
                        newLevel();
                    }
                } else {
                    gameOver();
                }
            }
        }
    }//GEN-LAST:event_box7TFMouseClicked

    private void box8TFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box8TFMouseClicked
        if (clickable[8]) {
            clickable[8] = false;
            count = count + 1;
            setBoxColour(8, config[8]);
            if (control == 0) {
                control = config[8];
            } else {
                if (control == config[8]) {
                    control = 0;

                    playAudio(4);
                    gameScore += Math.round((5 - (float) (count / 2)) * ((((float) (msTimeMaximum - msTimeInterval) / (float) (msTimeMaximum - msTimeMinimum)) * (maxMultiple - 1)) + 1));
                    gameScore2L.setText("" + gameScore);

                    if (gameScore > highScore) {
                        if (newHighScore && highScore != 0) {
                            playAudio(6);
                            JOptionPane.showMessageDialog(this, "New High Score Acheived !!");
                            newHighScore = false;
                        }

                        highScore = gameScore;
                        hScore2L.setText("" + highScore);

                        try {
                            Class.forName("java.sql.DriverManager");
                            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/gamezonedata", "root", "12345");
                            Statement stmt = (Statement) con.createStatement();
                            String query = "UPDATE highscores SET MatchTheColours = '" + highScore + "' WHERE Username = '" + username + "';";
                            stmt.executeUpdate(query);
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    }

                    if (count == 8) {
                        newLevel();
                    }
                } else {
                    gameOver();
                }
            }
        }
    }//GEN-LAST:event_box8TFMouseClicked

    private void box1TFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box1TFMouseEntered
        if (clickable[1]) {
            setBoxHighlighted(1);
        }
    }//GEN-LAST:event_box1TFMouseEntered

    private void box1TFMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box1TFMouseExited
        if (clickable[1]) {
            setBoxNormal(1);
        }
    }//GEN-LAST:event_box1TFMouseExited

    private void box1TFMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box1TFMousePressed
        if (clickable[1]) {
            setBoxPressed(1);
        }
    }//GEN-LAST:event_box1TFMousePressed

    private void box1TFMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box1TFMouseReleased
        if (clickable[1]) {
            setBoxHighlighted(1);
        }
    }//GEN-LAST:event_box1TFMouseReleased

    private void box2TFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box2TFMouseEntered
        if (clickable[2]) {
            setBoxHighlighted(2);
        }
    }//GEN-LAST:event_box2TFMouseEntered

    private void box2TFMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box2TFMouseExited
        if (clickable[2]) {
            setBoxNormal(2);
        }
    }//GEN-LAST:event_box2TFMouseExited

    private void box2TFMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box2TFMousePressed
        if (clickable[2]) {
            setBoxPressed(2);
        }
    }//GEN-LAST:event_box2TFMousePressed

    private void box2TFMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box2TFMouseReleased
        if (clickable[2]) {
            setBoxHighlighted(2);
        }
    }//GEN-LAST:event_box2TFMouseReleased

    private void box3TFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box3TFMouseEntered
        if (clickable[3]) {
            setBoxHighlighted(3);
        }
    }//GEN-LAST:event_box3TFMouseEntered

    private void box3TFMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box3TFMouseExited
        if (clickable[3]) {
            setBoxNormal(3);
        }
    }//GEN-LAST:event_box3TFMouseExited

    private void box3TFMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box3TFMousePressed
        if (clickable[3]) {
            setBoxPressed(3);
        }
    }//GEN-LAST:event_box3TFMousePressed

    private void box3TFMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box3TFMouseReleased
        if (clickable[3]) {
            setBoxHighlighted(3);
        }
    }//GEN-LAST:event_box3TFMouseReleased

    private void box4TFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box4TFMouseEntered
        if (clickable[4]) {
            setBoxHighlighted(4);
        }
    }//GEN-LAST:event_box4TFMouseEntered

    private void box4TFMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box4TFMouseExited
        if (clickable[4]) {
            setBoxNormal(4);
        }
    }//GEN-LAST:event_box4TFMouseExited

    private void box4TFMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box4TFMousePressed
        if (clickable[4]) {
            setBoxPressed(4);
        }
    }//GEN-LAST:event_box4TFMousePressed

    private void box4TFMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box4TFMouseReleased
        if (clickable[4]) {
            setBoxHighlighted(4);
        }
    }//GEN-LAST:event_box4TFMouseReleased

    private void box5TFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box5TFMouseEntered
        if (clickable[5]) {
            setBoxHighlighted(5);
        }
    }//GEN-LAST:event_box5TFMouseEntered

    private void box5TFMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box5TFMouseExited
        if (clickable[5]) {
            setBoxNormal(5);
        }
    }//GEN-LAST:event_box5TFMouseExited

    private void box5TFMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box5TFMousePressed
        if (clickable[5]) {
            setBoxPressed(5);
        }
    }//GEN-LAST:event_box5TFMousePressed

    private void box5TFMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box5TFMouseReleased
        if (clickable[5]) {
            setBoxHighlighted(5);
        }
    }//GEN-LAST:event_box5TFMouseReleased

    private void box6TFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box6TFMouseEntered
        if (clickable[6]) {
            setBoxHighlighted(6);
        }
    }//GEN-LAST:event_box6TFMouseEntered

    private void box6TFMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box6TFMouseExited
        if (clickable[6]) {
            setBoxNormal(6);
        }
    }//GEN-LAST:event_box6TFMouseExited

    private void box6TFMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box6TFMousePressed
        if (clickable[6]) {
            setBoxPressed(6);
        }
    }//GEN-LAST:event_box6TFMousePressed

    private void box6TFMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box6TFMouseReleased
        if (clickable[6]) {
            setBoxHighlighted(6);
        }
    }//GEN-LAST:event_box6TFMouseReleased

    private void box7TFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box7TFMouseEntered
        if (clickable[7]) {
            setBoxHighlighted(7);
        }
    }//GEN-LAST:event_box7TFMouseEntered

    private void box7TFMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box7TFMouseExited
        if (clickable[7]) {
            setBoxNormal(7);
        }
    }//GEN-LAST:event_box7TFMouseExited

    private void box7TFMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box7TFMousePressed
        if (clickable[7]) {
            setBoxPressed(7);
        }
    }//GEN-LAST:event_box7TFMousePressed

    private void box7TFMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box7TFMouseReleased
        if (clickable[7]) {
            setBoxHighlighted(7);
        }
    }//GEN-LAST:event_box7TFMouseReleased

    private void box8TFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box8TFMouseEntered
        if (clickable[8]) {
            setBoxHighlighted(8);
        }
    }//GEN-LAST:event_box8TFMouseEntered

    private void box8TFMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box8TFMouseExited
        if (clickable[8]) {
            setBoxNormal(8);
        }
    }//GEN-LAST:event_box8TFMouseExited

    private void box8TFMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box8TFMousePressed
        if (clickable[8]) {
            setBoxPressed(8);
        }
    }//GEN-LAST:event_box8TFMousePressed

    private void box8TFMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box8TFMouseReleased
        if (clickable[8]) {
            setBoxHighlighted(8);
        }
    }//GEN-LAST:event_box8TFMouseReleased

    private void returnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBtnActionPerformed
        if (!exit) {
            playAudio(0);
            int reply = JOptionPane.showConfirmDialog(this, "Game In Progress !!\nAre you sure you want to exit", "Caution !!", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                exit = true;
            }
        }

        if (exit) {
            homePage frame0 = new homePage();
            matchTheColours.this.setVisible(false);
            frame0.setVisible(true);
            frame0.dataPass0(username);
        }
    }//GEN-LAST:event_returnBtnActionPerformed

    private void proceedToGameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceedToGameBtnActionPerformed
        instructionsPanel.setVisible(false);

        gamePanel.setVisible(true);

        playAudio(1);
    }//GEN-LAST:event_proceedToGameBtnActionPerformed

    private void playAgainBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playAgainBtnActionPerformed
        gameOverPanel.setVisible(false);

        exit = true;

        control = 0;
        count = 0;

        msTimeInterval = msTimeMaximum;

        gameScore = 0;
        gameScore2L.setText("" + gameScore);

        hScore2L.setText("" + highScore);

        if (highScore == 0) {
            newHighScore = false;
        } else {
            newHighScore = true;
        }

        setAllBoxesNormal();

        correctMsgL.setVisible(false);
        instructionsMsg1L.setVisible(false);
        instructionsMsg2L.setVisible(false);

        startBtn.setText("Start Game");
        startBtn.setVisible(true);

        startMsg1L.setVisible(true);
        startMsg2L.setVisible(true);
        startMsg3L.setVisible(true);

        gamePanel.setVisible(true);
        playAudio(1);
    }//GEN-LAST:event_playAgainBtnActionPerformed

    public void display(int msDelay, int msFlash) {
        timerDelay = new Timer();
        timerDisplay = new Timer();
        timerDelay.schedule(new taskDelay(), msDelay);
        timerDisplay.schedule(new taskDisplay(), msFlash);
    }

    class taskDelay extends TimerTask {
        public void run() {
            int i;
            playAudio(3);
            for (i = 1; i <= 8; i++) {
                setBoxColour(i, config[i]);
            }
            timerDelay.cancel();
        }
    }

    class taskDisplay extends TimerTask {
        public void run() {
            setAllBoxesNormal();
            for (int i = 1; i <= 8; i++) {
                clickable[i] = true;
            }
            instructionsMsg1L.setVisible(true);
            instructionsMsg2L.setVisible(true);
            timerDisplay.cancel();
        }
    }

    public void gameOver() {
        for (int i = 1; i <= 8; i++) {
            setBoxColour(i, config[i]);
        }

        instructionsMsg1L.setVisible(false);
        instructionsMsg2L.setVisible(false);

        playAudio(7);
        JOptionPane.showMessageDialog(this, "Wrong !!");
        setAllBoxesNormal();

        count = 0;

        exit = true;

        gameScoreL.setText("\nGame Score: " + gameScore);
        highScoreL.setText("\nHigh Score: " + highScore);

        gamePanel.setVisible(false);
        gameOverPanel.setVisible(true);
    }

    public void newLevel() {
        count = 0;

        msTimeInterval -= msTimeStep;
        if (msTimeInterval < msTimeMinimum) {
            msTimeInterval = msTimeMinimum;
        }

        instructionsMsg1L.setVisible(false);
        instructionsMsg2L.setVisible(false);
        correctMsgL.setVisible(true);

        nextLevel(msTimeEnd);
    }

    public void nextLevel(int msTime) {
        timerCorrect = new Timer();
        timerCorrect.schedule(new taskCorrect(), msTime);
    }

    class taskCorrect extends TimerTask {
        public void run() {
            setAllBoxesNormal();
            correctMsgL.setVisible(false);
            startBtn.setText("Start");
            startBtn.setVisible(true);
            startMsg1L.setVisible(true);
            startMsg2L.setVisible(true);
            startMsg3L.setVisible(true);
        }
    }

    public void setAllBoxesNormal() {
        for (int i = 1; i <= 8; i++) {
            setBoxNormal(i);
        }
    }

    public void setBoxNormal(int box) {
        switch (box) {
            case 1:
                box1TF.setBackground(Color.decode(colourNormal));
                break;
            case 2:
                box2TF.setBackground(Color.decode(colourNormal));
                break;
            case 3:
                box3TF.setBackground(Color.decode(colourNormal));
                break;
            case 4:
                box4TF.setBackground(Color.decode(colourNormal));
                break;
            case 5:
                box5TF.setBackground(Color.decode(colourNormal));
                break;
            case 6:
                box6TF.setBackground(Color.decode(colourNormal));
                break;
            case 7:
                box7TF.setBackground(Color.decode(colourNormal));
                break;
            case 8:
                box8TF.setBackground(Color.decode(colourNormal));
                break;
        }
    }

    public void setBoxHighlighted(int box) {
        switch (box) {
            case 1:
                box1TF.setBackground(Color.decode(colourHighlighted));
                break;
            case 2:
                box2TF.setBackground(Color.decode(colourHighlighted));
                break;
            case 3:
                box3TF.setBackground(Color.decode(colourHighlighted));
                break;
            case 4:
                box4TF.setBackground(Color.decode(colourHighlighted));
                break;
            case 5:
                box5TF.setBackground(Color.decode(colourHighlighted));
                break;
            case 6:
                box6TF.setBackground(Color.decode(colourHighlighted));
                break;
            case 7:
                box7TF.setBackground(Color.decode(colourHighlighted));
                break;
            case 8:
                box8TF.setBackground(Color.decode(colourHighlighted));
                break;
        }
    }

    public void setBoxPressed(int box) {
        switch (box) {
            case 1:
                box1TF.setBackground(Color.decode(colourPressed));
                break;
            case 2:
                box2TF.setBackground(Color.decode(colourPressed));
                break;
            case 3:
                box3TF.setBackground(Color.decode(colourPressed));
                break;
            case 4:
                box4TF.setBackground(Color.decode(colourPressed));
                break;
            case 5:
                box5TF.setBackground(Color.decode(colourPressed));
                break;
            case 6:
                box6TF.setBackground(Color.decode(colourPressed));
                break;
            case 7:
                box7TF.setBackground(Color.decode(colourPressed));
                break;
            case 8:
                box8TF.setBackground(Color.decode(colourPressed));
                break;
        }
    }

    public void setBoxColour(int box, int colour) {
        switch (colour) {
            case 1:
                setBoxColourString(box, colourRed);
                break;
            case 2:
                setBoxColourString(box, colourGreen);
                break;
            case 3:
                setBoxColourString(box, colourBlue);
                break;
            case 4:
                setBoxColourString(box, colourYellow);
                break;
        }
    }

    public void setBoxColourString(int nBox, String sColour) {
        switch (nBox) {
            case 1:
                box1TF.setBackground(Color.decode(sColour));
                break;
            case 2:
                box2TF.setBackground(Color.decode(sColour));
                break;
            case 3:
                box3TF.setBackground(Color.decode(sColour));
                break;
            case 4:
                box4TF.setBackground(Color.decode(sColour));
                break;
            case 5:
                box5TF.setBackground(Color.decode(sColour));
                break;
            case 6:
                box6TF.setBackground(Color.decode(sColour));
                break;
            case 7:
                box7TF.setBackground(Color.decode(sColour));
                break;
            case 8:
                box8TF.setBackground(Color.decode(sColour));
                break;
        }
    }

    public void dataPass3(String uName, int sc) {
        username = uName;
        highScore = sc;
        nameL.setText(username);
        hScore2L.setText("" + highScore);
    }

    public void playAudio(int track) {
        switch (track) {
            case 0:
                Toolkit.getDefaultToolkit().beep();
                break;
            case 1:
                try {
                    InputStream music = new FileInputStream(new File("src\\Audio\\proceedToGame.wav"));
                    AudioStream audio = new AudioStream(music);
                    AudioPlayer.player.start(audio);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                break;
            case 2:
                try {
                    InputStream music = new FileInputStream(new File("src\\Audio\\singleBeep.wav"));
                    AudioStream audio = new AudioStream(music);
                    AudioPlayer.player.start(audio);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                break;
            case 3:
                try {
                    InputStream music = new FileInputStream(new File("src\\Audio\\glassPing.wav"));
                    AudioStream audio = new AudioStream(music);
                    AudioPlayer.player.start(audio);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                break;
            case 4:
                try {
                    InputStream music = new FileInputStream(new File("src\\Audio\\singleCoinDrop.wav"));
                    AudioStream audio = new AudioStream(music);
                    AudioPlayer.player.start(audio);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                break;
            case 5:
                try {
                    InputStream music = new FileInputStream(new File("src\\Audio\\multipleCoinDrop.wav"));
                    AudioStream audio = new AudioStream(music);
                    AudioPlayer.player.start(audio);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                break;
            case 6:
                try {
                    InputStream music = new FileInputStream(new File("src\\Audio\\tadaHighScore.wav"));
                    AudioStream audio = new AudioStream(music);
                    AudioPlayer.player.start(audio);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                break;
            case 7:
                try {
                    InputStream music = new FileInputStream(new File("src\\Audio\\buzzerGameOver.wav"));
                    AudioStream audio = new AudioStream(music);
                    AudioPlayer.player.start(audio);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                break;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new matchTheColours().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField box1TF;
    private javax.swing.JTextField box2TF;
    private javax.swing.JTextField box3TF;
    private javax.swing.JTextField box4TF;
    private javax.swing.JTextField box5TF;
    private javax.swing.JTextField box6TF;
    private javax.swing.JTextField box7TF;
    private javax.swing.JTextField box8TF;
    private javax.swing.JLabel correctMsgL;
    private javax.swing.JPanel coverPanel;
    private javax.swing.JLabel gameOverL;
    private javax.swing.JPanel gameOverPanel;
    private javax.swing.JPanel gamePanel;
    private javax.swing.JLabel gameScore1L;
    private javax.swing.JLabel gameScore2L;
    private javax.swing.JLabel gameScoreL;
    private javax.swing.JLabel hScore2L;
    private javax.swing.JLabel highScore1L;
    private javax.swing.JLabel highScoreL;
    private javax.swing.JPanel homeScreenPanel;
    private javax.swing.JTextField instructions1TF;
    private javax.swing.JTextArea instructions2TA;
    private javax.swing.JLabel instructionsMsg1L;
    private javax.swing.JLabel instructionsMsg2L;
    private javax.swing.JPanel instructionsPanel;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel matchTheColoursL;
    private javax.swing.JLabel matchTheColoursPic1L;
    private javax.swing.JLabel matchTheColoursPic2L;
    private javax.swing.JLabel matchTheColoursPic3L;
    private javax.swing.JLabel nameL;
    private javax.swing.JButton playAgainBtn;
    private javax.swing.JButton proceedToGameBtn;
    private javax.swing.JLabel rememberTheSequencePic4L;
    private javax.swing.JButton returnBtn;
    private javax.swing.JButton startBtn;
    private javax.swing.JLabel startMsg1L;
    private javax.swing.JLabel startMsg2L;
    private javax.swing.JLabel startMsg3L;
    private javax.swing.JLabel welcomeL;
    // End of variables declaration//GEN-END:variables
}
